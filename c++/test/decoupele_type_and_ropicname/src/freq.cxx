// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file freq.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "freq.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define freq_max_cdr_typesize 264ULL;
#define freq_max_key_cdr_typesize 0ULL;

freq::freq()
{
    // unsigned long m_freqenc
    m_freqenc = 0;
    // string m_message
    m_message ="";

}

freq::~freq()
{


}

freq::freq(
        const freq& x)
{
    m_freqenc = x.m_freqenc;
    m_message = x.m_message;
}

freq::freq(
        freq&& x) noexcept 
{
    m_freqenc = x.m_freqenc;
    m_message = std::move(x.m_message);
}

freq& freq::operator =(
        const freq& x)
{

    m_freqenc = x.m_freqenc;
    m_message = x.m_message;

    return *this;
}

freq& freq::operator =(
        freq&& x) noexcept
{

    m_freqenc = x.m_freqenc;
    m_message = std::move(x.m_message);

    return *this;
}

bool freq::operator ==(
        const freq& x) const
{

    return (m_freqenc == x.m_freqenc && m_message == x.m_message);
}

bool freq::operator !=(
        const freq& x) const
{
    return !(*this == x);
}

size_t freq::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return freq_max_cdr_typesize;
}

size_t freq::getCdrSerializedSize(
        const freq& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;


    return current_alignment - initial_alignment;
}

void freq::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_freqenc;
    scdr << m_message.c_str();

}

void freq::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_freqenc;
    dcdr >> m_message;
}

/*!
 * @brief This function sets a value in member freqenc
 * @param _freqenc New value for member freqenc
 */
void freq::freqenc(
        uint32_t _freqenc)
{
    m_freqenc = _freqenc;
}

/*!
 * @brief This function returns the value of member freqenc
 * @return Value of member freqenc
 */
uint32_t freq::freqenc() const
{
    return m_freqenc;
}

/*!
 * @brief This function returns a reference to member freqenc
 * @return Reference to member freqenc
 */
uint32_t& freq::freqenc()
{
    return m_freqenc;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void freq::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void freq::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& freq::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& freq::message()
{
    return m_message;
}


size_t freq::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return freq_max_key_cdr_typesize;
}

bool freq::isKeyDefined()
{
    return false;
}

void freq::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

